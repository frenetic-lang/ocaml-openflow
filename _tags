# OASIS_START
# DO NOT EDIT (digest: c549d3b3eb1ea3a63e2936cb07d78beb)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library openflow
"lib/openflow.cmxs": use_openflow
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(cstruct)
<lib/*.ml{,i,y}>: package(cstruct.syntax)
<lib/*.ml{,i,y}>: package(packet)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(sexplib.syntax)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(threads)
# Library async
"async/async.cmxs": use_async
<async/*.ml{,i,y}>: package(async)
<async/*.ml{,i,y}>: package(core)
<async/*.ml{,i,y}>: package(cstruct)
<async/*.ml{,i,y}>: package(cstruct.async)
<async/*.ml{,i,y}>: package(cstruct.syntax)
<async/*.ml{,i,y}>: package(packet)
<async/*.ml{,i,y}>: package(sexplib)
<async/*.ml{,i,y}>: package(sexplib.syntax)
<async/*.ml{,i,y}>: package(str)
<async/*.ml{,i,y}>: package(threads)
<async/*.ml{,i,y}>: use_openflow
# Library quickcheck
"quickcheck/quickcheck.cmxs": use_quickcheck
<quickcheck/*.ml{,i,y}>: package(core)
<quickcheck/*.ml{,i,y}>: package(cstruct)
<quickcheck/*.ml{,i,y}>: package(cstruct.syntax)
<quickcheck/*.ml{,i,y}>: package(packet)
<quickcheck/*.ml{,i,y}>: package(packet.quickcheck)
<quickcheck/*.ml{,i,y}>: package(quickcheck)
<quickcheck/*.ml{,i,y}>: package(sexplib)
<quickcheck/*.ml{,i,y}>: package(sexplib.syntax)
<quickcheck/*.ml{,i,y}>: package(str)
<quickcheck/*.ml{,i,y}>: package(threads)
<quickcheck/*.ml{,i,y}>: use_openflow
# Executable testtool
"test/Test.byte": package(core)
"test/Test.byte": package(cstruct)
"test/Test.byte": package(cstruct.syntax)
"test/Test.byte": package(oUnit)
"test/Test.byte": package(pa_ounit)
"test/Test.byte": package(pa_ounit.syntax)
"test/Test.byte": package(packet)
"test/Test.byte": package(packet.quickcheck)
"test/Test.byte": package(quickcheck)
"test/Test.byte": package(sexplib)
"test/Test.byte": package(sexplib.syntax)
"test/Test.byte": package(str)
"test/Test.byte": package(threads)
"test/Test.byte": use_openflow
"test/Test.byte": use_quickcheck
<test/*.ml{,i,y}>: package(core)
<test/*.ml{,i,y}>: package(cstruct)
<test/*.ml{,i,y}>: package(cstruct.syntax)
<test/*.ml{,i,y}>: package(oUnit)
<test/*.ml{,i,y}>: package(pa_ounit)
<test/*.ml{,i,y}>: package(pa_ounit.syntax)
<test/*.ml{,i,y}>: package(packet)
<test/*.ml{,i,y}>: package(packet.quickcheck)
<test/*.ml{,i,y}>: package(quickcheck)
<test/*.ml{,i,y}>: package(sexplib)
<test/*.ml{,i,y}>: package(sexplib.syntax)
<test/*.ml{,i,y}>: package(str)
<test/*.ml{,i,y}>: package(threads)
<test/*.ml{,i,y}>: use_openflow
<test/*.ml{,i,y}>: use_quickcheck
# Executable ping_test
"ping-test/PingTest.byte": package(async)
"ping-test/PingTest.byte": package(core)
"ping-test/PingTest.byte": package(cstruct)
"ping-test/PingTest.byte": package(cstruct.async)
"ping-test/PingTest.byte": package(cstruct.syntax)
"ping-test/PingTest.byte": package(oUnit)
"ping-test/PingTest.byte": package(pa_ounit)
"ping-test/PingTest.byte": package(pa_ounit.syntax)
"ping-test/PingTest.byte": package(packet)
"ping-test/PingTest.byte": package(sexplib)
"ping-test/PingTest.byte": package(sexplib.syntax)
"ping-test/PingTest.byte": package(str)
"ping-test/PingTest.byte": package(threads)
"ping-test/PingTest.byte": use_async
"ping-test/PingTest.byte": use_openflow
<ping-test/*.ml{,i,y}>: package(async)
<ping-test/*.ml{,i,y}>: package(core)
<ping-test/*.ml{,i,y}>: package(cstruct)
<ping-test/*.ml{,i,y}>: package(cstruct.async)
<ping-test/*.ml{,i,y}>: package(cstruct.syntax)
<ping-test/*.ml{,i,y}>: package(oUnit)
<ping-test/*.ml{,i,y}>: package(pa_ounit)
<ping-test/*.ml{,i,y}>: package(pa_ounit.syntax)
<ping-test/*.ml{,i,y}>: package(packet)
<ping-test/*.ml{,i,y}>: package(sexplib)
<ping-test/*.ml{,i,y}>: package(sexplib.syntax)
<ping-test/*.ml{,i,y}>: package(str)
<ping-test/*.ml{,i,y}>: package(threads)
<ping-test/*.ml{,i,y}>: use_async
<ping-test/*.ml{,i,y}>: use_openflow
# Executable learning_switch
"examples/Learning_Switch.byte": package(async)
"examples/Learning_Switch.byte": package(core)
"examples/Learning_Switch.byte": package(cstruct)
"examples/Learning_Switch.byte": package(cstruct.async)
"examples/Learning_Switch.byte": package(cstruct.syntax)
"examples/Learning_Switch.byte": package(packet)
"examples/Learning_Switch.byte": package(sexplib)
"examples/Learning_Switch.byte": package(sexplib.syntax)
"examples/Learning_Switch.byte": package(str)
"examples/Learning_Switch.byte": package(threads)
"examples/Learning_Switch.byte": use_async
"examples/Learning_Switch.byte": use_openflow
# Executable learning_switch0x04
"examples/Learning_Switch0x04.byte": package(async)
"examples/Learning_Switch0x04.byte": package(core)
"examples/Learning_Switch0x04.byte": package(cstruct)
"examples/Learning_Switch0x04.byte": package(cstruct.async)
"examples/Learning_Switch0x04.byte": package(cstruct.syntax)
"examples/Learning_Switch0x04.byte": package(packet)
"examples/Learning_Switch0x04.byte": package(sexplib)
"examples/Learning_Switch0x04.byte": package(sexplib.syntax)
"examples/Learning_Switch0x04.byte": package(str)
"examples/Learning_Switch0x04.byte": package(threads)
"examples/Learning_Switch0x04.byte": use_async
"examples/Learning_Switch0x04.byte": use_openflow
<examples/*.ml{,i,y}>: package(async)
<examples/*.ml{,i,y}>: package(core)
<examples/*.ml{,i,y}>: package(cstruct)
<examples/*.ml{,i,y}>: package(cstruct.async)
<examples/*.ml{,i,y}>: package(cstruct.syntax)
<examples/*.ml{,i,y}>: package(packet)
<examples/*.ml{,i,y}>: package(sexplib)
<examples/*.ml{,i,y}>: package(sexplib.syntax)
<examples/*.ml{,i,y}>: package(str)
<examples/*.ml{,i,y}>: package(threads)
<examples/*.ml{,i,y}>: use_async
<examples/*.ml{,i,y}>: use_openflow
# OASIS_STOP
<lib/*.ml{,i}>: syntax_camlp4o
<async/*.ml{,i}>: syntax_camlp4o
<test/*.ml{,i}>: syntax_camlp4o
<examples/*.ml{,i}>: syntax_camlp4o
